Проект необходимо выложить в публичный репозиторий github

1. Написать небольшой WEB сервис (CRUD), который оперирует 2-мя взаимосвязанными сущностями:

Сотрудник (Имя)
Оклад (Сумма)

сущности лежат в разных таблицах СУБД, предполагается что WEB сервис будет расширяться в дальнейшем

В сервисе должна быть возможность выполнить операции:

1) одиночное создание сотрудника с окладом
2) одиночное изменение оклада сотрудника
3) получение всех сотрудников с окладами
4) удаление всех сотрудников с окладами


За основу взять Spring Boot
инструмент сборки gradle или maven,
сервер приложений Tomcat (embedded),
формат передачи данных JSON,
СУБД - любая из транзационных,
любые внешние библиотеки
IDE - любая.

Аутентификацию и авторизацию не делаем.
Тестирование не делаем.
Front-end не пишем.

2. Покрыть тестами любой метод сущности из пункта 1 (на всех определенных уровнях абстракций)

3. Предположим что ваш проект будет помещен в облако в качестве микросервиса с поддержкой докер контейнеров

Дополнить пункт 1 простеньким Dockerfile' ом для сборки Docker-образа

4. Подключить к пункту 1 Spring Security, дать доступ к одному из методов любой сущности только пользователю логин: USER, 
пароль: USER с ролью USER, при этом остальные методы должны быть доступны всем

5. Написать мини-форму на React.js + Redux (+ любые другие библиотеки)

форма содержит: 
1) 2 поля ввода: Имя, Оклад и кнопка Создать
 , по нажатию на кнопку Создать - выполняется создание сотрудника с окладом из введенных поля ввода (Имя, Оклад) данных с помощью вызова метода WEB сервиса п.1 - 1)
3) таблицу всех сотрудников с окладами Имя (readonly) - Оклад  - кнопка Сохранить (таблица отображается по умолчанию) данные берутся из метода WEB сервиса п.1 - 3)
 , по нажатию на кнопку Cохранить в строке - выполняется изменение оклада сотрудника, указанного в строке с помощью вызова метода WEB сервиса п.1 - 2)
4) кнопку Удалить все, при нажатии на которую вызывается метод WEB сервиса п.1 - 4)




Пояснения к выполненному заданию

1 Реализован WEB сервис Spring Boot, БД SQLite (это связано с тем, что я из разных мест делал задание, 
в application.properties можно переключить на любую другую) в файле resources/schema.sql схема и тестовые данные
Сборка maven, 
IDE Eclipse
	
	порт - 8008
	api url - /api/v1/person/
	контроллер - ApiPersonController с 4 методами
	контроллер для React.js - IndexController

2. В пакете test класс PersonServiceControllerTest, 
	2 метода
		getPersonList - проверка списка уровня api и сервисов
		newPerson - проверка создания пользователя

3. До этого не работал с контейнерами, поэтому сделал самый простой Dockerfile и docker-compose.yml 
	во время сборки с помощью maven-resources-plugin в target копируются файлы контейнеров и БД
	С помощью Ant Build (ant_docker.xml) файлы перетаскиваются на сервер и запускается контейнер


4. Реализована авторизация inMemoryAuthentication с пользователем USER(пароль USER)
	метод с авторизацией - /api/v1/person/deleteall

5. Аналогично, первый раз делал приложение на React.js, не могу судить на сколько он правильный особенно webpack. На него у меня ушло 2 вечера.
	
	App.js - точка входа
	InstructorApp.js - роутер для маппинга путей
	сcomponent/ListPersonComponent - форма работы с сотрудниками
	service/ApiService - вспомогательный класс для работы с api



	








